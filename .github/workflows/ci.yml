name: CI

on:
  pull_request:
    branches: [ main ]

env:                       
  NODE_VERSION: "20"
  DFX_VERSION: "0.20.2"    

jobs:
# -------------------------------------------------
# 1. Build & test canister Motoko: backend
# -------------------------------------------------
  backend-canister:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache dfx
        id: cache-dfx
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/.config/dfx
          key: dfx-${{ env.DFX_VERSION }}

      - name: Install dfx
        if: steps.cache-dfx.outputs.cache-hit != 'true'
        run: |
          curl -sSf https://internetcomputer.org/install.sh \
            | sh -s -- --version $DFX_VERSION
          echo "$HOME/bin" >> "$GITHUB_PATH"

      - name: Build Motoko canister
        working-directory: backend
        run: dfx build --check

      - name: Motoko unit tests
        working-directory: backend
        run: dfx test

# -------------------------------------------------
# 2. Build & test Express API
# -------------------------------------------------
  express-api:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        working-directory: api
        run: npm ci

      - name: Lint
        working-directory: api
        run: npm run lint --if-present

      - name: Unit tests
        working-directory: api
        run: npm test --if-present

# -------------------------------------------------
# 3. Build & test proxy_frontend canister
#    (Motoko + asset build)
# -------------------------------------------------
  proxy-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Re-use Node setup for asset tooling (vite/webpack)
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dfx
        run: |
          curl -sSf https://internetcomputer.org/install.sh \
            | sh -s -- --version $DFX_VERSION
          echo "$HOME/bin" >> "$GITHUB_PATH"

      - name: Build canister & frontend assets
        working-directory: proxy_frontend
        run: |
          npm ci                           
          dfx build --check proxy_frontend

      - name: Frontend unit/E2E tests
        working-directory: proxy_frontend
        run: npm test --if-present

# -------------------------------------------------
# 4. Gate job 
# -------------------------------------------------
  all-green:
    runs-on: ubuntu-latest
    needs:
      - backend-canister
      - express-api
      - proxy-frontend
    steps:
      - run: echo "âœ…  Great"
